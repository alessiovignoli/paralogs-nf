
params {

    // Inputs
    orthologs_ids           = null
	fasta                   = null
	intersecting_genes      = null
	input_sim               = null
	orthologs_ids_sim       = null

    // Optional inputs
    db                      = null
	AF2                     = null
	
    // Output options
    outdir                  = "./results/"           // the outdir has to be the one the user specify _ the unique name of the run _ the time so that multiple runs will not overlap
    publish_dir_mode        = "copy"

    // Computational resources
    max_cpus                = 12                     // this flasg and the following are for regulating resources, profiles can overwrite these.
    max_gpus                = 0                      // requesting the gpus for structural info. nut used in latest version.
    max_memory              = 32.GB
    max_time                = "72.h"

    // Error options
    max_retries             = 0
    err_start               = 'finish'

    // Optional flags
	data                    = 'sim'
	ref                     = "MOUSE"
	species_num             = 6
    mode                    = 'tcoffee'
	species_num_sim         = 25

    // General
    singularity_cache_dir   = "singularity_cache"
    help                    = false
	cleanup                 = true                  // cleans up the working directory after pipeline is succsessful.
    
    // Config options

}



// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        apptainer.cacheDir     = "${params.singularity_cache_dir}"
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir   = "${params.singularity_cache_dir}"
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        process.debug          = true
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    crg_slurm    { includeConfig "conf/crg_slurm.config"  }
    test         { includeConfig "conf/test.config"       }
    local        { includeConfig "conf/local.config"      }
}




// trace/report options
// this will allow the pipeline to create tracing/report files with all the steps and the time/memory/cpu they took
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
def trace_dir = "${params.outdir}/pipeline_info"
timeline {
    enabled = true
    file    = "${trace_dir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${trace_dir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${trace_dir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${trace_dir}/execution_dag_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}